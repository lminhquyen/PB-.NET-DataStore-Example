@page "/salesorder"

@using DWNet.Data;
@using SnapObjects.Data;
@using Appeon.DataStoreDemo.SqlServer;
@using System.Net.Http
@inject HttpClient Http

@if (Customers == null)
{
    <p>Loading...</p>
}
else
{
    @if (listMode)
    {
        <D_SalesOrder_Select_View Params="@Params" Customers="@Customers" />

        <button @onclick="@Filter">Filter</button>

        @if (OrderLoading)
        {
            <p>Loading...</p>
        }
        else if (Orders != null)
        {
            <D_Order_Header_Grid_View Orders="@Orders" Customers="@Customers" EditCallback="@EditCallback" />
        }
    }
    else
    {
        <SalesOrder_DetailView Products="@Products" Customers="@Customers" DW_Master="@data" OnClickCallback="@(() => listMode = !listMode)" />
    }
}


@code {

    IDataStore<D_Dddw_Customer_Individual> Customers;
    IDataStore<D_Dddw_Order_Production> Products;

    IDataStore<D_Order_Header_Grid> Orders;

    D_Salesorder_Select Params;

    bool listMode = true;
    IDataStore<D_Order_Header_Free> data;
    bool OrderLoading;

    protected override async Task OnInitializedAsync()
    {
        Params = new D_Salesorder_Select
        {
            Date_From = new DateTime(2013, 1, 1),
            Date_To = new DateTime(2013, 12, 31),
            Customer = null
        };

        var response = await Http.GetAsync("http://localhost:16561/api/SalesOrder/WinOpen");
        response.EnsureSuccessStatusCode();
        string json = await response.Content.ReadAsStringAsync();
        IDataUnpacker unPacker = new DataUnpacker(json, DataFormat.Json);

        Customers = new DataStore<D_Dddw_Customer_Individual>();
        string json2 = unPacker.GetValue<string>("Customer");
        Customers.ImportJson(json2);

        Products = new DataStore<D_Dddw_Order_Production>();
        json2 = unPacker.GetValue<string>("OrderProduct");
        Products.ImportJson(json2);
    }

    private async Task Filter(MouseEventArgs args)
    {
        OrderLoading = true;
        StateHasChanged();

        int id = Params.Customer.HasValue ? (int)Params.Customer.Value : 0;
        string from = Params.Date_From.Value.ToString("yyyy-MM-dd");
        string to = Params.Date_To.Value.ToString("yyyy-MM-dd");
        var response = await Http.GetAsync(
            $"http://localhost:16561/api/SalesOrder/RetrieveSaleOrderList/{id}/{from}/{to}");
        response.EnsureSuccessStatusCode();
        string json = await response.Content.ReadAsStringAsync();
        IDataUnpacker unPacker = new DataUnpacker(json, DataFormat.Json);
        string json2 = unPacker.GetValue<string>("SalesOrderHeader");

        Orders = new DataStore<D_Order_Header_Grid>();
        Orders.ImportJsonByKey(json2);
        Orders.ResetUpdate();

        OrderLoading = false;
    }

    private void EditCallback(D_Order_Header_Grid row)
    {
        IDataStore<D_Order_Header_Grid> dt1 = new DataStore<D_Order_Header_Grid>();
        dt1.Add(row);

        string json = dt1.ExportJson();
        data = new DataStore<D_Order_Header_Free>();
        data.ImportJsonByKey(json);
        data.ResetUpdate();        

        listMode = !listMode;
    }
}