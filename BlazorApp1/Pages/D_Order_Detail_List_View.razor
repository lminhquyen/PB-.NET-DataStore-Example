@using Appeon.DataStoreDemo.SqlServer;
@using DWNet.Data;
@using SnapObjects.Data;
@inject IJSRuntime JsRuntime;

<DxDataGrid Data="@DataSource"
            RowUpdating="@OnRowUpdating"
            RowInserting="@OnRowInserting"
            InitNewRow="@OnInitNewRow"
            @ref="myGrid">
    <DxDataGridColumn Field="@nameof(D_Order_Detail_List_ViewModel.Index)" Caption="No." />
    <DxDataGridColumn Field="@nameof(D_Order_Detail_List_ViewModel.Status)" Caption="Status" />
    <DxDataGridColumn Field="@nameof(D_Order_Detail_List.Salesorderdetailid)" Caption="Id" />
    <DxDataGridComboBoxColumn Field="@nameof(D_Order_Detail_List.Productid)"
                              TextFieldName="@nameof(D_Dddw_Order_Production.Product_Name)"
                              ValueFieldName="@nameof(D_Dddw_Order_Production.Product_Productid)"
                              Caption="Product"
                              Data="@Products" />
    <DxDataGridColumn Field="@nameof(D_Order_Detail_List.Unitprice)" Caption="Unit Price" />
    <DxDataGridColumn Field="@nameof(D_Order_Detail_List.Orderqty)" Caption="Order Qty" />
    <DxDataGridColumn Field="@nameof(D_Order_Detail_List.Unitpricediscount)" Caption="Unit Price Discount" />
    <DxDataGridColumn Field="@nameof(D_Order_Detail_List.Linetotal)" Caption="Line Total" />
    <DxDataGridDateEditColumn Field="@nameof(D_Order_Detail_List.Modifieddate)" Caption="Modified Date" />

    <DxDataGridCommandColumn>
        <CellTemplate>
            <button type="submit" 
                    @onclick="@((args) => { myGrid.StartRowEdit(context); })"
                    disabled="@Disabled((D_Order_Detail_List_ViewModel)context)">Edit</button>
            <button type="submit"
                    disabled="@Disabled((D_Order_Detail_List_ViewModel)context)"
                    @onclick="@((args) => { OnRowRemoving((D_Order_Detail_List_ViewModel)context); })">Delete</button>
        </CellTemplate>
    </DxDataGridCommandColumn>
</DxDataGrid>

@code {
        DxDataGrid<D_Order_Detail_List_ViewModel> myGrid;
    [Parameter]
    public IDataStore<D_Dddw_Order_Production> Products { get; set; }

    [Parameter]
    public IDataStore DW_Order_Details { get; set; }

    List<D_Order_Detail_List_ViewModel> DataSource = new List<D_Order_Detail_List_ViewModel>();

    protected override void OnParametersSet()
    {
        DataSource.Clear();
        for (int i = 0; i < DW_Order_Details.RowCount; i++)
        {
            DataSource.Add(new D_Order_Detail_List_ViewModel
            {
                Model = DW_Order_Details.GetModel<D_Order_Detail_List>(i),
                Index = i,
                Status = DW_Order_Details.GetRowStatus(i)
            }); ;
        }
    }

    public class D_Order_Detail_List_ViewModel
    {
        public D_Order_Detail_List Model { get; set; } = new D_Order_Detail_List();
        public int Index { get; set; } = -1;
        public ModelState Status { get; set; } = ModelState.NotModified;

        public int Salesorderdetailid
        {
            get => Model.Salesorderdetailid;
            set => Model.Salesorderdetailid = value;
        }
        public int Productid
        {
            get => Model.Productid;
            set => Model.Productid = value;
        }
        public decimal Unitprice
        {
            get => Model.Unitprice;
            set => Model.Unitprice = value;
        }
        public int Orderqty
        {
            get => Model.Orderqty;
            set => Model.Orderqty = value;
        }
        public decimal Unitpricediscount
        {
            get => Model.Unitpricediscount;
            set => Model.Unitpricediscount = value;
        }
        public decimal Linetotal
        {
            get => Model.Linetotal;
            set => Model.Linetotal = value;
        }
        public DateTime Modifieddate
        {
            get => Model.Modifieddate;
            set => Model.Modifieddate = value;
        }
    }

    bool Disabled(D_Order_Detail_List_ViewModel dataItem)
    {
        return dataItem.Status == ModelState.Deleted;
    }
    void OnRowRemoving(D_Order_Detail_List_ViewModel dataItem)
    {
        if (dataItem.Status != ModelState.Deleted)
        {
            DW_Order_Details.DeleteRow(dataItem.Index);

            if (dataItem.Status == ModelState.NewModified)
            {
                DataSource.Remove(dataItem);
            }
            else
            {
                dataItem.Index = -1;
                dataItem.Status = ModelState.Deleted;
            }
            myGrid.Refresh();
        }
    }

    void OnRowUpdating(D_Order_Detail_List_ViewModel dataItem, IDictionary<string, object> newValue)
    {
        Copy(dataItem.Index, newValue);
        dataItem.Model = DW_Order_Details.GetModel<D_Order_Detail_List>(dataItem.Index);
        dataItem.Status = ModelState.Modified;
        StateHasChanged();
    }

    void Copy(int index, IDictionary<string, object> newValue)
    {
        foreach (var key in newValue.Keys)
            DW_Order_Details.SetItem(index, key, Convert(key, newValue[key]));
    }

    object Convert(string key, object value)
    {
        switch (key)
        {
            case nameof(D_Order_Detail_List.Orderqty):
                return int.Parse((string)value);
            case nameof(D_Order_Detail_List.Linetotal):
                return decimal.Parse((string)value);
            case nameof(D_Order_Detail_List.Productid):
                return ((D_Dddw_Order_Production)value).Product_Productid;
            case nameof(D_Order_Detail_List.Unitprice):
                return decimal.Parse((string)value);
            case nameof(D_Order_Detail_List.Unitpricediscount):
                return decimal.Parse((string)value);

        }
        return value;
    }

    void OnRowInserting(IDictionary<string, object> newValue)
    {
        newValue.Add(nameof(D_Order_Detail_List.Specialofferid), 1);
        int index = DW_Order_Details.RowCount;
        DW_Order_Details.ImportJson(
            Newtonsoft.Json.JsonConvert.SerializeObject(
            new D_Order_Detail_List[] { new D_Order_Detail_List() }));
        Copy(index, newValue);
        DataSource.Add(
            new D_Order_Detail_List_ViewModel {
                Model = DW_Order_Details.GetModel<D_Order_Detail_List>(index),
                Index = index,
                Status = ModelState.NewModified
            });
        StateHasChanged();
    }

    Task OnInitNewRow(Dictionary<string, object> values)
    {
        values.Add(nameof(D_Order_Detail_List.Modifieddate), DateTime.Now);

        return Task.CompletedTask;
    }
}
